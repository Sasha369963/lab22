import pandas as pd
from urllib import request
from os import listdir, makedirs, walk, path
from shutil import rmtree
from datetime import datetime
from re import search

# Перевірка заданої папки на порожність. Якщо вона не порожня - папка очищується
def check_folder(folder_path):
    if path.exists(folder_path) and listdir(folder_path):
        rmtree(folder_path)
    makedirs(folder_path, exist_ok=True)

check_folder('data')

# Скачування даних в папку data
def download_data(province_id):
    url = f'https://www.star.nesdis.noaa.gov/smcd/emb/vci/VH/get_TS_admin.php?country=UKR&provinceID={province_id}&year1=1981&year2=2024&type=Mean'

    try:
        vhi = request.urlopen(url).read().decode('utf-8')
        now = datetime.now()
        formatted_time = now.strftime('%d%m%Y%H%M%S')
        with open(f'data/vhi_id_{province_id}_{formatted_time}.csv', 'w') as f:
            f.write(vhi)
    except Exception as e:
        print(f'An error occurred while downloading file for province id {province_id}: {e}')

for i in range(1, 28):
    download_data(i)

# Конвертація файлів в датафрейми та препроцесинг
def create_df(file_path, norm_province_id):
    headers = ['Year', 'Week', 'SMN', 'SMT', 'VCI', 'TCI', 'VHI', 'empty']
    temp_df = pd.read_csv(file_path, header=1, names=headers)
    temp_df = temp_df[temp_df['VHI'] != -1]
    temp_df.loc[0, 'Year'] = temp_df.loc[0, 'Year'][9:]
    temp_df = temp_df.drop(columns='empty').drop(temp_df.index[-1])
    temp_df['area'] = norm_province_id
    temp_df['Year'] = temp_df['Year'].astype(int)
    return temp_df

def get_paths(dir_path):
    file_paths = []
    for root, dirs, files in walk(dir_path):
        for file in files:
            file_paths.append(path.join(root, file))
    return file_paths

def find_province_id(file_path):
    with open(file_path, 'r') as f:
        return int(search(r'Province\s*=\s*(\d+)', f.readline()).group(1))

replacements = {
    1: 22, 2: 24, 3: 23, 4: 25, 5: 3, 6: 4, 7: 8, 8: 19, 9: 20, 10: 21, 
    11: 9, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: 14, 18: 15, 19: 16, 
    20: 25, 21: 17, 22: 18, 23: 6, 24: 1, 25: 2, 26: 7, 27: 5
}

adf = pd.concat([create_df(file, replacements[find_province_id(file)]) for file in get_paths('data')])

# Формування ряду VHI для області за вказаний рік
def form_vhi_series(df, province_id, year):
    filtered_df = df.loc[(df['area'] == province_id) & (df['Year'] == year)]
    return filtered_df['VHI'].reset_index(drop=True)

# Пошук екстремумів для вказаних областей та років
def find_mct(df, province_ids, year1, year2):
    filtered_df = df.loc[(df['area'].isin(province_ids)) & (df['Year'].between(year1, year2))]
    aggregated = filtered_df.groupby(['Year', 'area'])['VHI'].agg(['mean', 'min', 'max', 'median']).reset_index()
    aggregated.rename(columns={'mean': 'mean_VHI', 'min': 'min_VHI', 'max': 'max_VHI', 'median': 'median_VHI'}, inplace=True)
    return aggregated

# Формування ряду VHI за вказаний діапазон років для вказаних областей
def form_vhi_df(df, province_ids, start_year, end_year):
    filtered_df = df.loc[(df['area'].isin(province_ids)) & (df['Year'].between(start_year, end_year))]
    return filtered_df[['area', 'Year', 'Week', 'VHI']].drop_duplicates().reset_index(drop=True)

# Виявлення років з екстремальною посухою
def find_ed_years(df, percent):
    threshold = int(27 * (percent / 100))
    drought_df = df[df['VHI'] < 15]
    drought_count = drought_df.groupby('Year')['area'].nunique().reset_index(name='Drought_Area_Count')
    severe_years = drought_count[drought_count['Drought_Area_Count'] > threshold]['Year']
    return drought_df[drought_df['Year'].isin(severe_years)].reset_index(drop=True)

# Приклад використання функцій
series_example = form_vhi_series(adf, 2, 2020)
mct_example = find_mct(adf, [3, 8, 10], 1999, 2009)
df_example = form_vhi_df(adf, [4, 15, 21], 1991, 2008)
extreme_drought_years = find_ed_years(adf, 10)
